import turtle as tr
import random as rd



sc=tr.Screen()
sc.setup(800, 600)
sc.bgcolor("black")
sc.tracer(0)
coordinates_=[(0,0),(-20,0),(-40,0)]
all_turtles=[]
score=0


for coordinate in coordinates_:
    new_toto=tr.Turtle()
    new_toto.shape("square")
    new_toto.color("limegreen")
    new_toto.speed(0)
    new_toto.penup()
    new_toto.goto(coordinate)
    all_turtles.append(new_toto)



sc.update()
direction= 'Up'

game_has_begun = True
def move():
    for i in range(len(all_turtles)-1,0,-1):
        new_x=all_turtles[i-1].xcor()
        new_y=all_turtles[i-1].ycor()
        all_turtles[i].goto(new_x,new_y)
    if direction == 'Up':
        all_turtles[0].setheading(90)

    elif direction == 'Down':
        all_turtles[0].setheading(270)

    elif direction == 'Left':
        all_turtles[0].setheading(180)

    elif direction == 'Right':
        all_turtles[0].setheading(0)
    all_turtles[0].forward(20)


def move_up():
    global direction
    if direction != 'Down':
        direction = 'Up'
def move_down():
    global direction
    if direction != 'Up':
        direction = 'Down'
def move_right():
    global direction
    if direction  != 'Left':
        direction = 'Right'
def move_left():
    global direction
    if direction != 'Right':
         direction = 'Left'

apple_=tr.Turtle()
dirnx= rd.randint(-380,380)
dirny=rd.randint(-270,270)
apple_.shape("circle")
apple_.color("red")
apple_.penup()
apple_.speed(0)
apple_.goto(x=dirnx,y=dirny)

def new_snak_length():
    ns=tr.Turtle()
    ns.shape("square")
    ns.color("limegreen")
    ns.shapesize(stretch_wid=1, stretch_len=1)
    ns.penup()
    ns.speed(0)
    ns.goto(all_turtles[-1].position())
    all_turtles.append(ns)

def score_board():
    score_bd.clear()
    score_bd.write(f"Score: {score}", align="left", font=("Arial", 15, "bold"))




def food_movement():
    global apple_,dirnx,dirny,score
    if all_turtles[0].distance(apple_) < 20:
        new_snak_length()
        score+=1
        score_board()
        dirnx = rd.randint(-370, 370)
        dirny = rd.randint(-270, 270)
        apple_.goto(x=dirnx, y=dirny)

def border():
    border_=tr.Turtle()
    border_.hideturtle()
    border_.pencolor("white")
    border_.pensize(2)
    border_.penup()
    border_.speed(0)
    border_.goto(x=-390,y=290)
    border_.pendown()
    for i in range(2):
        border_.fd(770)
        border_.rt(90)
        border_.fd(570)
        border_.rt(90)

def check_wall_collision():
    x, y = all_turtles[0].position()
    return x < -380 or x > 390 or y < -290 or y > 290
def tail_meets():
    for segment in all_turtles[1:]:
        if all_turtles[0].distance(segment) < 20:
            game_over()
            return
def game_over():
    end = tr.Turtle()
    end.hideturtle()
    end.color("red")
    end.write("GAME OVER", align="center", font=("Arial", 32, "bold"))
score_bd=tr.Turtle()
score_bd.hideturtle()
score_bd.goto(x=-370,y=265)
score_bd.pencolor("white")





border()
score_board()


sc.listen()
sc.onkey(move_up, "Up")
sc.onkey(move_down, "Down")
sc.onkey(move_left, "Left")
sc.onkey(move_right, "Right")


def game_loop():

    move()
    if check_wall_collision():
        game_over()
        return
    tail_meets()
    food_movement()
    sc.update()
    sc.ontimer(game_loop, 150)
game_loop()



sc.mainloop()

